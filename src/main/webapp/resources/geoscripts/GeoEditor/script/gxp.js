/*
Copyright (c) 2008-2009, The Open Planning Project
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Open Planning Project nor the names
      of its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/

Ext.namespace("gxp");gxp.util={dispatch:function(functions,complete,scope){complete=complete||Ext.emptyFn;scope=scope||this;var requests=functions.length;var responses=0;var storage={};function respond(){++responses;if(responses===requests){complete.call(scope,storage);}}
function trigger(index){window.setTimeout(function(){functions[index].apply(scope,[respond,storage]);});}
for(var i=0;i<requests;++i){trigger(i);}}};Ext.namespace("gxp.data");gxp.data.WFSFeatureStore=Ext.extend(GeoExt.data.FeatureStore,{setOgcFilter:function(ogcFilter){this.proxy.setFilter(ogcFilter);},constructor:function(config){if(!config.proxy){config.proxy=new gxp.data.WFSProtocolProxy({srsName:config.srsName,url:config.url,featureType:config.featureType,featureNS:config.featureNS,geometryName:config.geometryName,schema:config.schema,filter:config.ogcFilter,maxFeatures:config.maxFeatures});}
if(!config.writer){config.writer=new Ext.data.DataWriter({write:Ext.emptyFn});}
gxp.data.WFSFeatureStore.superclass.constructor.apply(this,arguments);this.reader.extractValues=(function(data,items,length){var obj=this.readRecords([data.feature]);return obj.records[0].data;}).createDelegate(this.reader);this.reader.meta.idProperty="id";}});Ext.namespace("gxp.grid");gxp.grid.FeatureGrid=Ext.extend(Ext.grid.GridPanel,{map:null,ignoreFields:null,layer:null,initComponent:function(){this.ignoreFields=["feature","state","fid"].concat(this.ignoreFields);if(this.store){this.cm=this.createColumnModel(this.store);if(this.map){this.layer=new OpenLayers.Layer.Vector(this.id+"_layer");this.map.addLayer(this.layer);}}else{this.store=new Ext.data.Store();this.cm=new Ext.grid.ColumnModel({columns:[]});}
if(this.layer){this.sm=this.sm||new GeoExt.grid.FeatureSelectionModel({layerFromStore:false,layer:this.layer});if(this.store instanceof GeoExt.data.FeatureStore){this.store.bind(this.layer);}}
gxp.grid.FeatureGrid.superclass.initComponent.call(this);},onDestroy:function(){if(this.initialConfig&&this.initialConfig.map&&!this.initialConfig.layer){this.layer.destroy();delete this.layer;}
gxp.grid.FeatureGrid.superclass.onDestroy.apply(this,arguments);},setStore:function(store){if(this.store instanceof GeoExt.data.FeatureStore){this.store.unbind();}
if(this.layer){this.layer.destroyFeatures();store.bind(this.layer);}
this.reconfigure(store,this.createColumnModel(store));},createColumnModel:function(store){var columns=[];store.fields.each(function(f){var name=f.name;if(this.ignoreFields.indexOf(name)===-1){columns.push({dataIndex:f.name,header:f.name,sortable:true});}},this);return new Ext.grid.ColumnModel(columns);}});Ext.reg('gx_featuregrid',gxp.grid.FeatureGrid);Ext.namespace("gxp.data");gxp.data.WFSProtocolProxy=Ext.extend(GeoExt.data.ProtocolProxy,{setFilter:function(filter){this.protocol.filter=filter;this.protocol.options.filter=filter;},constructor:function(config){Ext.applyIf(config,{version:"1.1.0"});if(!this.protocol){config.protocol=new OpenLayers.Protocol.WFS({version:config.version,srsName:config.srsName,url:config.url,featureType:config.featureType,featureNS:config.featureNS,geometryName:config.geometryName,schema:config.schema,filter:config.filter,maxFeatures:config.maxFeatures});}
gxp.data.WFSProtocolProxy.superclass.constructor.apply(this,arguments);},doRequest:function(action,records,params,reader,callback,scope,arg){delete params.xaction;if(action===Ext.data.Api.actions.read){this.load(params,reader,callback,scope,arg);}else{if(!(records instanceof Array)){records=[records];}
var features=new Array(records.length);Ext.each(records,function(r,i){features[i]=r.get("feature");},this);var o={action:action,records:records,callback:callback,scope:scope};this.protocol.commit(features,{callback:function(response){this.onProtocolCommit(response,o);},scope:this});}},onProtocolCommit:function(response,o){if(response.success()){var features=response.reqFeatures;var state,feature;var destroys=[];var insertIds=response.insertIds||[];var j=0;for(var i=0,len=features.length;i<len;++i){feature=features[i];state=feature.state;if(state){if(state==OpenLayers.State.DELETE){destroys.push(feature);}else if(state==OpenLayers.State.INSERT){feature.fid=insertIds[j];++j;}
feature.state=null;}}
var feature;for(var i=0,len=destroys.length;i<len;++i){feature=destroys[i];feature.layer&&feature.layer.destroyFeatures([feature]);}
var len=features.length;var data=new Array(len);var f;for(var i=0;i<len;++i){f=features[i];data[i]={id:f.id,feature:f};}
o.callback.call(o.scope,data,response.priv,true);}else{this.fireEvent("exception",this,"response",o.action,o,response);o.callback.call(o.scope,[],response.priv,false);}}});Ext.namespace("gxp.grid");gxp.grid.CapabilitiesGrid=Ext.extend(Ext.grid.GridPanel,{store:null,cm:null,mapPanel:null,url:null,autoExpandColumn:"title",initComponent:function(){if(!this.store){this.store=new GeoExt.data.WMSCapabilitiesStore({url:this.url+"?service=wms&request=GetCapabilities"});this.store.load();}
var expander=new Ext.grid.RowExpander({tpl:new Ext.Template('<p><b>Abstract:</b> {abstract}</p>')});this.plugins=expander;this.cm=new Ext.grid.ColumnModel([expander,{header:"Name",dataIndex:"name",width:180,sortable:true},{id:"title",header:"Title",dataIndex:"title",sortable:true},{header:"Queryable",dataIndex:"queryable"}]);gxp.grid.CapabilitiesGrid.superclass.initComponent.call(this);},addLayers:function(base){var sm=this.getSelectionModel();var records=sm.getSelections();var record,layer,newRecords=[];for(var i=0;i<records.length;i++){Ext.data.Record.AUTO_ID++;record=records[i].copy(Ext.data.Record.AUTO_ID);if(this.alignToGrid){layer=record.get("layer").clone();layer.maxExtent=new OpenLayers.Bounds(-180,-90,180,90);}else{layer=record.get("layer");layer=new OpenLayers.Layer.WMS(layer.name,layer.url,{layers:layer.params["LAYERS"]},{attribution:layer.attribution,maxExtent:OpenLayers.Bounds.fromArray(record.get("llbbox")).transform(new OpenLayers.Projection("EPSG:4326"),this.mapPanel.map.getProjectionObject())});}
record.data["layer"]=layer;record.commit(true);newRecords.push(record);}
if(newRecords.length){var index=this.mapPanel.layers.findBy(function(r){return r.get("layer")instanceof OpenLayers.Layer.Vector;});if(index!==-1){this.mapPanel.layers.insert(index,newRecords);}else{this.mapPanel.layers.add(newRecords);}}}});Ext.reg('gx_capabilitiesgrid',gxp.grid.CapabilitiesGrid);Ext.namespace("gxp");gxp.FeatureEditPopup=Ext.extend(GeoExt.Popup,{closeMsgTitle:'Save Changes?',closeMsg:'This feature has unsaved changes. Would you like to save your changes?',deleteMsgTitle:'Delete Feature?',deleteMsg:'Are you sure you want to delete this feature?',editButtonText:'Edit',editButtonTooltip:'Make this feature editable',deleteButtonText:'Delete',deleteButtonTooltip:'Delete this feature',cancelButtonText:'Cancel',cancelButtonTooltip:'Stop editing, discard changes',saveButtonText:'Save',saveButtonTooltip:'Save changes',layout:"fit",feature:null,schema:null,allowDelete:false,editing:false,grid:null,modifyControl:null,geometry:null,attributes:null,cancelButton:null,saveButton:null,editButton:null,deleteButton:null,initComponent:function(){this.addEvents("featuremodified","canceledit","cancelclose");var feature=this.feature;this.anchored=!this.editing;var customEditors={};if(this.schema){var attributes={};var name,type,value;this.schema.each(function(r){type=this.getFieldType(r.get("type"));name=r.get("name");value=feature.attributes[name];switch(type){case"string":break;case"boolean":value=Boolean(value);default:customEditors[name]=new Ext.grid.GridEditor(new Ext.form.NumberField({selectOnFocus:true,style:'text-align:left;'}));}
attributes[name]=value;},this);feature.attributes=attributes;}
if(!this.title&&feature.fid){this.title=feature.fid;}
this.editButton=new Ext.Button({text:this.editButtonText,tooltip:this.editButtonTooltip,iconCls:"edit",handler:this.startEditing,scope:this});this.deleteButton=new Ext.Button({text:this.deleteButtonText,tooltip:this.deleteButtonTooltip,iconCls:"delete",hidden:!this.allowDelete,handler:this.deleteFeature,scope:this});this.cancelButton=new Ext.Button({text:this.cancelButtonText,tooltip:this.cancelButtonTooltip,iconCls:"cancel",hidden:true,handler:function(){this.stopEditing(false);},scope:this});this.saveButton=new Ext.Button({text:this.saveButtonText,tooltip:this.saveButtonTooltip,iconCls:"save",hidden:true,handler:function(){this.stopEditing(true);},scope:this});this.grid=new Ext.grid.PropertyGrid({border:false,source:feature.attributes,customEditors:customEditors,listeners:{"beforeedit":function(){return this.editing;},"propertychange":function(){this.setFeatureState(this.getDirtyState());},scope:this}});this.items=[this.grid];this.bbar=new Ext.Toolbar({items:[this.editButton,this.deleteButton,this.saveButton,this.cancelButton]});gxp.FeatureEditPopup.superclass.initComponent.call(this);this.on({"show":function(){if(this.editing){this.editing=null;this.startEditing();}},"beforeclose":function(){if(!this.editing){return;}
if(this.feature.state===this.getDirtyState()){Ext.Msg.show({title:this.closeMsgTitle,msg:this.closeMsg,buttons:Ext.Msg.YESNOCANCEL,fn:function(button){if(button&&button!=="cancel"){this.stopEditing(button==="yes");this.close();}else{this.fireEvent("cancelclose",this);}},scope:this,icon:Ext.MessageBox.QUESTION,animEl:this.getEl()});return false;}else{this.stopEditing(false);}},scope:this});},getDirtyState:function(){return this.feature.state===OpenLayers.State.INSERT?this.feature.state:OpenLayers.State.UPDATE;},getFieldType:function(attrType){return({"xsd:boolean":"boolean","xsd:int":"int","xsd:integer":"int","xsd:short":"int","xsd:long":"int","xsd:date":"date","xsd:string":"string","xsd:float":"float","xsd:double":"float"})[attrType];},startEditing:function(){if(!this.editing){this.editing=true;this.anc&&this.unanchorPopup();this.editButton.hide();this.deleteButton.hide();this.saveButton.show();this.cancelButton.show();this.geometry=this.feature.geometry.clone();this.attributes=Ext.apply({},this.feature.attributes);this.modifyControl=new OpenLayers.Control.ModifyFeature(this.feature.layer,{standalone:true});this.feature.layer.map.addControl(this.modifyControl);this.modifyControl.activate();this.modifyControl.selectFeature(this.feature);}},stopEditing:function(save){if(this.editing){this.modifyControl.deactivate();this.modifyControl.destroy();var feature=this.feature;if(feature.state===this.getDirtyState()){if(save===true){this.fireEvent("featuremodified",this,feature);}else if(feature.state===OpenLayers.State.INSERT){this.editing=false;feature.layer.destroyFeatures([feature]);this.close();}else{var layer=feature.layer;layer.drawFeature(feature,{display:"none"});feature.geometry=this.geometry;feature.attributes=this.attributes;this.setFeatureState(null);this.grid.setSource(feature.attributes);layer.drawFeature(feature);this.fireEvent("canceledit",this,feature);}}
this.cancelButton.hide();this.saveButton.hide();this.editButton.show();this.allowDelete&&this.deleteButton.show();this.editing=false;}},deleteFeature:function(){Ext.Msg.show({title:this.deleteMsgTitle,msg:this.deleteMsg,buttons:Ext.Msg.YESNO,fn:function(button){if(button==="yes"){this.setFeatureState(OpenLayers.State.DELETE);this.fireEvent("featuremodified",this,this.feature);this.close();}},scope:this,icon:Ext.MessageBox.QUESTION,animEl:this.getEl()});},setFeatureState:function(state){this.feature.state=state;var layer=this.feature.layer;layer&&layer.events.triggerEvent("featuremodified",{feature:this.feature});}});Ext.namespace("gxp");gxp.WMSLayerPanel=Ext.extend(Ext.TabPanel,{layerRecord:null,activeTab:0,border:false,imageFormats:/png|gif|jpe?g/i,initComponent:function(){this.items=[this.createAboutPanel(),this.createDisplayPanel()];gxp.WMSLayerPanel.superclass.initComponent.call(this);},createAboutPanel:function(){return{title:"About",defaults:{border:false},items:[{layout:"form",labelWidth:70,items:[{xtype:"textfield",fieldLabel:"Title",anchor:"99%",value:this.layerRecord.get("title"),listeners:{change:function(field){this.layerRecord.set("title",field.getValue());this.layerRecord.commit();},scope:this}},{xtype:"textfield",fieldLabel:"Name",anchor:"99%",value:this.layerRecord.get("name"),readOnly:true}]},{layout:"form",labelAlign:"top",items:[{xtype:"textarea",fieldLabel:"Description",grow:true,growMax:150,anchor:"99%",value:this.layerRecord.get("abstract"),readOnly:true}]}]};},createDisplayPanel:function(){var record=this.layerRecord;var layer=record.get("layer");var opacity=layer.opacity;if(opacity==null){opacity=1;}
var formats=[];var currentFormat=layer.params["FORMAT"].toLowerCase();Ext.each(this.layerRecord.get("formats"),function(format){if(this.imageFormats.test(format)){formats.push(format.toLowerCase());}},this);if(formats.indexOf(currentFormat)===-1){formats.push(currentFormat);}
var transparent=layer.params["TRANSPARENT"];transparent=(transparent==="true"||transparent===true);return{title:"Display",layout:"form",labelWidth:70,items:[{xtype:"slider",name:"opacity",fieldLabel:"Opacity",value:opacity*100,anchor:"99%",isFormField:true,listeners:{change:function(slider,value){layer.setOpacity(value/100);}}},{xtype:"combo",fieldLabel:"Format",store:formats,value:currentFormat,mode:"local",triggerAction:"all",editable:false,anchor:"99%",listeners:{select:function(combo){layer.mergeNewParams({format:combo.getValue()});}}},{xtype:"checkbox",fieldLabel:"Transparent",checked:transparent,listeners:{check:function(checkbox,checked){layer.mergeNewParams({transparent:checked?"true":"false"});}}}]};}});Ext.reg('gx_wmslayerpanel',gxp.WMSLayerPanel);Ext.namespace("gxp");gxp.FilterBuilder=Ext.extend(Ext.Panel,{builderTypeNames:["any","all","none","not all"],allowedBuilderTypes:null,preComboText:"Match",postComboText:"of the following:",cls:"gx-filterbuilder",builderType:null,childFiltersPanel:null,customizeFilterOnInit:true,allowGroups:true,initComponent:function(){var defConfig={plain:true,border:false,defaultBuilderType:gxp.FilterBuilder.ANY_OF};Ext.applyIf(this,defConfig);if(this.customizeFilterOnInit){this.filter=this.customizeFilter(this.filter);}
this.builderType=this.getBuilderType();this.items=[{xtype:"container",items:[{xtype:"container",layout:"column",style:"margin-top: 0.25em;",defaults:{hideMode:"offsets"},items:[{xtype:"label",text:this.preComboText,cls:"x-form-item",style:"padding: 0.3em 0.3em 0;"},this.createBuilderTypeCombo(),{xtype:"label",text:this.postComboText,cls:"x-form-item",style:"padding: 0.3em 0.3em 0;"}]}]},this.createChildFiltersPanel()];this.bbar=this.createToolBar();this.addEvents("change");gxp.FilterBuilder.superclass.initComponent.call(this);},createToolBar:function(){var bar=[{text:"add condition",iconCls:"add",handler:function(){this.addCondition();},scope:this}];if(this.allowGroups){bar.push({text:"add group",iconCls:"add",handler:function(){this.addCondition(true);},scope:this});}
return bar;},getFilter:function(){var filter;if(this.filter){filter=this.filter.clone();if(filter instanceof OpenLayers.Filter.Logical){filter=this.cleanFilter(filter);}}
return filter;},cleanFilter:function(filter){if(filter instanceof OpenLayers.Filter.Logical){if(filter.type!==OpenLayers.Filter.Logical.NOT&&filter.filters.length===1){filter=this.cleanFilter(filter.filters[0]);}else{var child;for(var i=0,len=filter.filters.length;i<len;++i){child=filter.filters[i];if(child instanceof OpenLayers.Filter.Logical){child=this.cleanFilter(child);if(child){filter.filters[i]=child;}else{filter=child;break;}}else if(!child||child.type===null||child.property===null||child.value===null){filter=false;break;}}}}else{if(!filter||filter.type===null||filter.property===null||filter.value===null){filter=false;}}
return filter;},customizeFilter:function(filter){if(!filter){filter=this.wrapFilter(this.createDefaultFilter());}else{filter=this.cleanFilter(filter);switch(filter.type){case OpenLayers.Filter.Logical.AND:case OpenLayers.Filter.Logical.OR:if(!filter.filters||filter.filters.length===0){filter.filters=[this.createDefaultFilter()];}else{var child;for(var i=0,len=filter.filters.length;i<len;++i){child=filter.filters[i];if(child instanceof OpenLayers.Filter.Logical){filter.filters[i]=this.customizeFilter(child);}}}
filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[filter]});break;case OpenLayers.Filter.Logical.NOT:if(!filter.filters||filter.filters.length===0){filter.filters=[new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[this.createDefaultFilter()]})];}else{var child=filter.filters[0];if(child instanceof OpenLayers.Filter.Logical){if(child.type!==OpenLayers.Filter.Logical.NOT){var grandchild;for(var i=0,len=child.filters.length;i<len;++i){grandchild=child.filters[i];if(grandchild instanceof OpenLayers.Filter.Logical){child.filters[i]=this.customizeFilter(grandchild);}}}else{if(child.filters&&child.filters.length>0){filter=this.customizeFilter(child.filters[0]);}else{filter=this.wrapFilter(this.createDefaultFilter());}}}else{var type;if(this.defaultBuilderType===gxp.FilterBuilder.NOT_ALL_OF){type=OpenLayers.Logical.Filter.AND;}else{type=OpenLayers.Logical.Filter.OR;}
filter.filters=[new OpenLayers.Filter.Logical({type:type,filters:[child]})];}}
break;default:filter=this.wrapFilter(filter);}}
return filter;},createDefaultFilter:function(){return new OpenLayers.Filter.Comparison();},wrapFilter:function(filter){var type;if(this.defaultBuilderType===gxp.FilterBuilder.ALL_OF){type=OpenLayers.Filter.Logical.AND;}else{type=OpenLayers.Filter.Logical.OR;}
return new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[new OpenLayers.Filter.Logical({type:type,filters:[filter]})]});},addCondition:function(group){var filter,type;if(group){type="gx_filterbuilder";filter=this.wrapFilter(this.createDefaultFilter());}else{type="gx_filterpanel";filter=this.createDefaultFilter();}
var newChild=this.newRow({xtype:type,filter:filter,attributes:this.attributes,customizeFilterOnInit:group&&false,listeners:{change:function(){this.fireEvent("change",this);},scope:this}});this.childFiltersPanel.add(newChild);this.filter.filters[0].filters.push(filter);this.childFiltersPanel.doLayout();},removeCondition:function(panel,filter){var parent=this.filter.filters[0].filters;if(parent.length>1){parent.remove(filter);this.childFiltersPanel.remove(panel,true);}
this.fireEvent("change",this);},createBuilderTypeCombo:function(){var types=this.allowedBuilderTypes||[gxp.FilterBuilder.ANY_OF,gxp.FilterBuilder.ALL_OF,gxp.FilterBuilder.NONE_OF];var numTypes=types.length;var data=new Array(numTypes);var type;for(var i=0;i<numTypes;++i){type=types[i];data[i]=[type,this.builderTypeNames[type]];}
return{xtype:"combo",store:new Ext.data.SimpleStore({data:data,fields:["value","name"]}),value:this.builderType,displayField:"name",valueField:"value",triggerAction:"all",mode:"local",listeners:{select:function(combo,record){this.changeBuilderType(record.get("value"));this.fireEvent("change",this);},scope:this},width:60};},changeBuilderType:function(type){if(type!==this.builderType){this.builderType=type;var child=this.filter.filters[0];switch(type){case gxp.FilterBuilder.ANY_OF:this.filter.type=OpenLayers.Filter.Logical.OR;child.type=OpenLayers.Filter.Logical.OR;break;case gxp.FilterBuilder.ALL_OF:this.filter.type=OpenLayers.Filter.Logical.OR;child.type=OpenLayers.Filter.Logical.AND;break;case gxp.FilterBuilder.NONE_OF:this.filter.type=OpenLayers.Filter.Logical.NOT;child.type=OpenLayers.Filter.Logical.OR;break;case gxp.FilterBuilder.NOT_ALL_OF:this.filter.type=OpenLayers.Filter.Logical.NOT;child.type=OpenLayers.Filter.Logical.AND;break;}}},createChildFiltersPanel:function(){this.childFiltersPanel=new Ext.Container();var grandchildren=this.filter.filters[0].filters;var grandchild;for(var i=0,len=grandchildren.length;i<len;++i){grandchild=grandchildren[i];this.childFiltersPanel.add(this.newRow({xtype:(grandchild instanceof OpenLayers.Filter.Logical)?"gx_filterbuilder":"gx_filterpanel",filter:grandchild,attributes:this.attributes,listeners:{change:function(){this.fireEvent("change",this);},scope:this}}));}
return this.childFiltersPanel;},newRow:function(filterPanel){var panel=new Ext.Container({layout:"column",style:"padding: 0.5em 0 0.3em 0;",items:[{xtype:"container",style:"padding: 0 0.5em 0 2px;",items:[{xtype:"button",tooltip:"remove condition",iconCls:"delete",beforeDestroy:function(){if(this.rendered){var btnEl=this.el.child(this.buttonSelector);if(btnEl){if(typeof this.tooltip=='object'){Ext.QuickTips.unregister(btnEl);}
btnEl.removeAllListeners();}}
if(this.menu){Ext.destroy(this.menu);}},handler:function(btn){this.removeCondition(panel,filterPanel.filter);},scope:this}]},{xtype:"container",columnWidth:1,items:[filterPanel]}]});return panel;},getBuilderType:function(){var type=this.defaultBuilderType;if(this.filter){var child=this.filter.filters[0];if(this.filter.type===OpenLayers.Filter.Logical.NOT){switch(child.type){case OpenLayers.Filter.Logical.OR:type=gxp.FilterBuilder.NONE_OF;break;case OpenLayers.Filter.Logical.AND:type=gxp.FilterBuilder.NOT_ALL_OF;break;}}else{switch(child.type){case OpenLayers.Filter.Logical.OR:type=gxp.FilterBuilder.ANY_OF;break;case OpenLayers.Filter.Logical.AND:type=gxp.FilterBuilder.ALL_OF;break;}}}
return type;}});gxp.FilterBuilder.ANY_OF=0;gxp.FilterBuilder.ALL_OF=1;gxp.FilterBuilder.NONE_OF=2;gxp.FilterBuilder.NOT_ALL_OF=3;Ext.reg('gx_filterbuilder',gxp.FilterBuilder);Ext.namespace("gxp.form");gxp.form.ComarisonComboBox=Ext.extend(Ext.form.ComboBox,{allowedTypes:[[OpenLayers.Filter.Comparison.EQUAL_TO,"="],[OpenLayers.Filter.Comparison.NOT_EQUAL_TO,"<>"],[OpenLayers.Filter.Comparison.LESS_THAN,"<"],[OpenLayers.Filter.Comparison.GREATER_THAN,">"],[OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO,"<="],[OpenLayers.Filter.Comparison.GREATER_THAN_OR_EQUAL_TO,">="],[OpenLayers.Filter.Comparison.LIKE,"like"]],allowBlank:false,mode:"local",triggerAction:"all",width:50,editable:false,initComponent:function(){var defConfig={displayField:"name",valueField:"value",store:new Ext.data.SimpleStore({data:this.allowedTypes,fields:["value","name"]}),value:(this.value===undefined)?this.allowedTypes[0][0]:this.value};Ext.applyIf(this,defConfig);gxp.form.ComarisonComboBox.superclass.initComponent.call(this);}});Ext.reg("gx_comparisoncombo",gxp.form.ComarisonComboBox);Ext.namespace("gxp");gxp.FilterPanel=Ext.extend(Ext.Panel,{filter:null,attributes:null,attributesComboConfig:null,initComponent:function(){var defConfig={layout:"column",border:false,defaults:{hideMode:"offsets"}};Ext.applyIf(this,defConfig);if(!this.filter){this.filter=this.createDefaultFilter();}
if(!this.attributes){this.attributes=new GeoExt.data.AttributeStore();}
var defAttributesComboConfig={xtype:"combo",store:this.attributes,editable:false,triggerAction:"all",allowBlank:false,displayField:"name",valueField:"name",value:this.filter.property,listeners:{select:function(combo,record){this.filter.property=record.get("name");this.fireEvent("change",this.filter);},scope:this},width:120};this.attributesComboConfig=this.attributesComboConfig||{};Ext.applyIf(this.attributesComboConfig,defAttributesComboConfig);this.items=this.createFilterItems();this.addEvents("change");gxp.FilterPanel.superclass.initComponent.call(this);},createDefaultFilter:function(){return new OpenLayers.Filter.Comparison();},createFilterItems:function(){return[this.attributesComboConfig,{xtype:"gx_comparisoncombo",value:this.filter.type,listeners:{select:function(combo,record){this.filter.type=record.get("value");this.fireEvent("change",this.filter);},scope:this}},{xtype:"container",layout:"anchor",columnWidth:this.attributesComboConfig.width?1:1-(this.attributesComboConfig.columnWidth||0.5),items:[{xtype:"textfield",value:this.filter.value,anchor:"100%",allowBlank:false,listeners:{change:function(el,value){this.filter.value=value;this.fireEvent("change",this.filter);},scope:this}}]}];}});Ext.reg('gx_filterpanel',gxp.FilterPanel);Ext.namespace("gxp");gxp.QueryPanel=Ext.extend(Ext.Panel,{layout:"form",spatialQuery:true,attributeQuery:true,selectedLayer:null,featureStore:null,attributeStore:null,geometryType:null,geometryName:null,initComponent:function(){this.addEvents("ready","beforelayerchange","layerchange","beforequery","query","storeload");this.mapExtentField=new Ext.form.TextField({fieldLabel:"Current extent",readOnly:true,anchor:"100%",value:this.getFormattedMapExtent()});this.map.events.on({moveend:this.updateMapExtent,scope:this});this.createFilterBuilder(this.layerStore.getAt(0));this.items=[{xtype:"combo",name:"layer",fieldLabel:"Layer",store:this.layerStore,value:this.layerStore.getAt(0).get("name"),displayField:"title",valueField:"name",mode:"local",allowBlank:true,editable:false,triggerAction:"all",listeners:{beforeselect:function(combo,record,index){return this.fireEvent("beforelayerchange",this,record);},select:function(combo,record,index){this.createFilterBuilder(record);},scope:this}},{xtype:"fieldset",title:"Query by location",checkboxToggle:true,collapsed:!this.spatialQuery,anchor:"95%",items:[this.mapExtentField],listeners:{collapse:function(){this.spatialQuery=false;},expand:function(){this.spatialQuery=true;},scope:this}},{xtype:"fieldset",title:"Query by attributes",checkboxToggle:true,collapsed:!this.attributeQuery,anchor:"95%",items:[this.filterBuilder],listeners:{collapse:function(){this.attributeQuery=false;},expand:function(){this.attributeQuery=true;},scope:this}}];gxp.QueryPanel.superclass.initComponent.apply(this,arguments);},createFilterBuilder:function(record){this.selectedLayer=record;var owner=this.filterBuilder&&this.filterBuilder.ownerCt;if(owner){owner.remove(this.filterBuilder,true);}
this.attributeStore=new GeoExt.data.AttributeStore({url:record.get("schema"),listeners:{load:function(store){this.geometryName=null;store.filterBy(function(r){var match=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface)).*/.exec(r.get("type"));if(match&&!this.geometryName){this.geometryName=r.get("name");this.geometryType=match[1];this.fireEvent("layerchange",this,record);}
return!match;},this);this.createFeatureStore();},scope:this},autoLoad:true});this.filterBuilder=new gxp.FilterBuilder({attributes:this.attributeStore,allowGroups:false});if(owner){owner.add(this.filterBuilder);owner.doLayout();}},getFormattedMapExtent:function(){return this.map&&this.map.getExtent()&&this.map.getExtent().toBBOX().replace(/\.(\d)\d*/g,".$1").replace(/,/g,", ");},updateMapExtent:function(){this.mapExtentField.setValue(this.getFormattedMapExtent());},getFilter:function(){var attributeFilter=this.attributeQuery&&this.filterBuilder.getFilter();var spatialFilter=this.spatialQuery&&new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.BBOX,value:this.map.getExtent()});var filter;if(attributeFilter&&spatialFilter){filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[spatialFilter,attributeFilter]});}else{filter=attributeFilter||spatialFilter;}
return filter;},getFieldType:function(attrType){return({"xsd:boolean":"boolean","xsd:int":"int","xsd:integer":"int","xsd:short":"int","xsd:long":"int","xsd:date":"date","xsd:string":"string","xsd:float":"float","xsd:double":"float"})[attrType];},createFeatureStore:function(){var fields=[];this.attributeStore.each(function(record){fields.push({name:record.get("name"),type:this.getFieldType(record.get("type"))});},this);var layer=this.selectedLayer;this.featureStore=new gxp.data.WFSFeatureStore({fields:fields,srsName:this.map.getProjection(),url:layer.get("url"),featureType:layer.get("name"),featureNS:layer.get("namespace"),geometryName:this.geometryName,schema:layer.get("schema"),maxFeatures:this.maxFeatures,autoLoad:false,autoSave:false,listeners:{load:function(store,records,options){this.fireEvent("storeload",this,store,records,options);},scope:this}});this.fireEvent("ready",this,this.featureStore);},query:function(){if(this.featureStore){if(this.fireEvent("beforequery",this)!==false){this.featureStore.setOgcFilter(this.getFilter());this.featureStore.load();this.fireEvent("query",this,this.featureStore);}}},beforeDestroy:function(){if(this.map&&this.map.events){this.map.events.un({moveend:this.updateMapExtent,scope:this});}
gxp.QueryPanel.superclass.beforeDestroy.apply(this,arguments);}});Ext.reg('gx_querypanel',gxp.QueryPanel);